- name: Check if application is already a git repo
  stat:
    path: /home/amanpm108/projects/getting-started-python/7-gce/.git
  register: app_git_dir

- name: Clone application repo (force update if exists)
  ansible.builtin.git:
    repo: "https://github.com/GoogleCloudPlatform/getting-started-python.git"
    dest: "/home/amanpm108/projects/getting-started-python"
    version: steps
    force: yes
  when: not app_git_dir.stat.exists

- name: Ensure config.py exists before replacing variables
  stat:
    path: "{{ project_dir }}/config.py"
  register: config_stat



- name: Replace config.py values
  shell: |
    sed -i "s|PROJECT_ID = '.*'|PROJECT_ID = '{{ PROJECT_ID }}'|g" {{ project_dir }}/config.py
    sed -i "s|CLOUDSQL_USER = '.*'|CLOUDSQL_USER = '{{ CLOUDSQL_USER }}'|g" {{ project_dir }}/config.py
    sed -i "s|CLOUDSQL_PASSWORD = '.*'|CLOUDSQL_PASSWORD = '{{ CLOUDSQL_PASSWORD }}'|g" {{ project_dir }}/config.py
    sed -i "s|CLOUDSQL_DATABASE = '.*'|CLOUDSQL_DATABASE = '{{ CLOUDSQL_DATABASE }}'|g" {{ project_dir }}/config.py
    sed -i "s|CLOUDSQL_CONNECTION_NAME = '.*'|CLOUDSQL_CONNECTION_NAME = '{{ CLOUDSQL_CONNECTION_NAME }}'|g" {{ project_dir }}/config.py
    sed -i "s|CLOUD_STORAGE_BUCKET = '.*'|CLOUD_STORAGE_BUCKET = '{{ CLOUD_STORAGE_BUCKET }}'|g" {{ project_dir }}/config.py
    sed -i "s|GOOGLE_OAUTH2_CLIENT_ID = .*|GOOGLE_OAUTH2_CLIENT_ID = '{{ GOOGLE_OAUTH2_CLIENT_ID }}'|g" {{ project_dir }}/config.py
    sed -i "s|GOOGLE_OAUTH2_CLIENT_SECRET = '.*'|GOOGLE_OAUTH2_CLIENT_SECRET = '{{ GOOGLE_OAUTH2_CLIENT_SECRET }}'|g" {{ project_dir }}/config.py
    sed -i "s|DATA_BACKEND = '.*'|DATA_BACKEND = '{{ DATA_BACKEND }}'|g" {{ project_dir }}/config.py
  args:
    executable: /bin/bash

- name: Remove stray 'your-client-id' line
  lineinfile:
    path: "{{ project_dir }}/config.py"
    regexp: '^\s*''your-client-id''\s*$'
    state: absent

- name: Upgrade pip inside virtualenv
  command: /home/amanpm108/.pyenv/versions/3.5.10/envs/myenv/bin/pip install --upgrade pip
  
- name: Install dependencies in virtualenv
  pip:
    requirements: "{{ project_dir }}/requirements.txt"
    virtualenv: "/home/amanpm108/.pyenv/versions/3.5.10/envs/myenv"
    virtualenv_python: python3.5

- name: Force SQLAlchemy to always use the live connection URI
  lineinfile:
    path: "{{ project_dir }}/config.py"
    regexp: '^SQLALCHEMY_DATABASE_URI\s*='
    line: 'SQLALCHEMY_DATABASE_URI = LIVE_SQLALCHEMY_DATABASE_URI'
    create: yes

- name: Replace conditional GAE_INSTANCE block with static LIVE SQL URI
  ansible.builtin.replace:
    path: "{{ project_dir }}/config.py"
    regexp: |
      if\s+os\.environ\.get\(['"]GAE_INSTANCE['"]\):\s*\n\s*SQLALCHEMY_DATABASE_URI\s*=\s*.*?\n\s*else:\s*\n\s*SQLALCHEMY_DATABASE_URI\s*=\s*.*?
    replace: 'SQLALCHEMY_DATABASE_URI = LIVE_SQLALCHEMY_DATABASE_URI'

- name: Update main.py to bind to 0.0.0.0 instead of 127.0.0.1
  lineinfile:
    path: "{{ project_dir }}/main.py"
    regexp: '^(\s*)app\.run\(host=''127\.0\.0\.1'', port=8080, debug=True\)'
    line: '    app.run(host=''0.0.0.0'', port=8080, debug=True)'
    state: present
    
- name: Initialize Cloud SQL tables
  command: "/home/amanpm108/.pyenv/versions/3.5.10/envs/myenv/bin/python {{ project_dir }}/bookshelf/model_cloudsql.py"
  args:
    chdir: "{{ project_dir }}"
  environment:
    PYTHONPATH: "{{ project_dir }}"
